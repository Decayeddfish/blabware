--[[

██████╗░██╗░░░░░░█████╗░██████╗░░██╗░░░░░░░██╗░█████╗░██████╗░███████╗██╗
██╔══██╗██║░░░░░██╔══██╗██╔══██╗░██║░░██╗░░██║██╔══██╗██╔══██╗██╔════╝██║
██████╦╝██║░░░░░███████║██████╦╝░╚██╗████╗██╔╝███████║██████╔╝█████╗░░██║
██╔══██╗██║░░░░░██╔══██║██╔══██╗░░████╔═████║░██╔══██║██╔══██╗██╔══╝░░╚═╝
██████╦╝███████╗██║░░██║██████╦╝░░╚██╔╝░╚██╔╝░██║░░██║██║░░██║███████╗██╗
╚═════╝░╚══════╝╚═╝░░╚═╝╚═════╝░░░░╚═╝░░░╚═╝░░╚═╝░░╚═╝╚═╝░░╚═╝╚══════╝╚═╝

]]

getgenv().Prediction = 0.12974519423204936
getgenv().JumpOffset = 0.04
getgenv().AimPart = "HumanoidRootPart"
getgenv().Key = "Q"
getgenv().DisableKey = "P"
getgenv().UseFOV = true
getgenv().AutoUnlock = true
getgenv().Aimlock = true
getgenv().FOVSize = 200
getgenv().DotColor = Color3.fromRGB(167, 92, 243)
getgenv().TracerColor = Color3.fromRGB(158, 128, 255)
getgenv().FOVCircleColor = Color3.fromRGB(158, 128, 255)
getgenv().UIColor = Color3.fromRGB(158, 128, 255)
getgenv().ResolverEnabled = false
getgenv().ResolverMethod = "MoveDirection" -- or "Recalculate"
getgenv().ResolverUpdateTime = 100
getgenv().AntiLockEnabled = false
getgenv().AntiLockActive = false -- True while anti is running
getgenv().AntiLockKey = Enum.KeyCode.Z
getgenv().AntiLockType = "None"
getgenv().ShouldStarhookDestroy = false
getgenv().ShowFOVCircle = true
getgenv().ShowDot = true
getgenv().ShowTracer = true
getgenv().ESPEnabled = getgenv().ESPEnabled or false
getgenv().ShowESPHighlight = getgenv().ShowESPHighlight ~= false
getgenv().ShowESPHealthBar = getgenv().ShowESPHealthBar ~= false

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GuiService = game:GetService("GuiService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local TweenService = game:GetService("TweenService")

local RemoteName = "MAINEVENT"
local Argument = "MOUSE"

if not getgenv().FOV_Circle then
    getgenv().FOV_Circle = Drawing.new("Circle")
    getgenv().FOV_Circle.Filled = false
    getgenv().FOV_Circle.Transparency = 1
    getgenv().FOV_Circle.Thickness = 1
    getgenv().FOV_Circle.Color = getgenv().FOVCircleColor
    getgenv().FOV_Circle.NumSides = 1000
end

local fovCircle = getgenv().FOV_Circle

local DotParent = Instance.new("Part", workspace)
DotParent.Name = "DotParent"
DotParent.Anchored = true
DotParent.CanCollide = false
DotParent.Size = Vector3.new(0.1, 0.1, 0.1)
DotParent.Transparency = 1
DotParent.CFrame = CFrame.new(0, 9999, 0)

if not getgenv().Tracer then
    getgenv().Tracer = Drawing.new("Line")
    getgenv().Tracer.Transparency = 1
    getgenv().Tracer.Thickness = 1
    getgenv().Tracer.Color = getgenv().TracerColor
end

local tracer = getgenv().Tracer

local newBillboard = Instance.new("BillboardGui", DotParent)
newBillboard.Name = "azure_billboarddot"
newBillboard.Adornee = DotParent
newBillboard.Size = UDim2.new(0.6, 0, 0.6, 0)
newBillboard.AlwaysOnTop = true

local newFrame = Instance.new("Frame", newBillboard)
newFrame.Size = UDim2.new(1, 0, 1, 0)
newFrame.BackgroundTransparency = 0
newFrame.BackgroundColor3 = getgenv().DotColor

local newUiCorner = Instance.new("UICorner", newFrame)
newUiCorner.CornerRadius = UDim.new(0.5, 0)

local Locked = false
local Victim = nil

local function is_target_valid(target)
    return target
        and target.Character
        and target.Character:FindFirstChild(getgenv().AimPart)
        and target.Character:FindFirstChild("Humanoid")
        and target.Character.Humanoid.Health > 0
end

local function get_closest_target()
    local closest_distance = math.huge
    local closest_target = nil

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and is_target_valid(player) then
            local target_position = player.Character[getgenv().AimPart].Position
            local screen_position, on_screen = Camera:WorldToScreenPoint(target_position)

            if on_screen then
                local mouse_position = Vector2.new(Mouse.X, Mouse.Y)
                local distance = (Vector2.new(screen_position.X, screen_position.Y) - mouse_position).Magnitude
                if (not getgenv().UseFOV or distance <= getgenv().FOVSize) and distance < closest_distance then
                    closest_distance = distance
                    closest_target = player
                end
            end
        end
    end

    return closest_target
end

local function recalculate_velocity(part, update_time)
    local current_position = part.Position
    local current_time = tick()
    task.wait(1 / update_time)
    local new_position = part.Position
    local new_time = tick()
    local distance_traveled = (new_position - current_position)
    local time_interval = (new_time - current_time)
    local velocity = (distance_traveled / time_interval)
    return velocity
end

local function calculate_predicted_position(target)
    if not is_target_valid(target) then
        return nil
    end

    local root_part = target.Character[getgenv().AimPart]

    if not root_part.Position or typeof(root_part.Position) ~= "Vector3" then
        warn("Anti-lock detected: Invalid Position on target.")
        return nil
    end

    local velocity
    if getgenv().ResolverEnabled then
        if getgenv().ResolverMethod == "Recalculate" then
            velocity = recalculate_velocity(root_part, getgenv().ResolverUpdateTime)
        elseif getgenv().ResolverMethod == "MoveDirection" then
            velocity = target.Character.Humanoid.MoveDirection * target.Character.Humanoid.WalkSpeed
        else
            velocity = root_part.Velocity
        end
    else
        velocity = root_part.Velocity
    end

    return root_part.Position + (velocity * getgenv().Prediction)
end



local function fire_bullet(predicted_position)
    if predicted_position then
        local remote_event = ReplicatedStorage:FindFirstChild(RemoteName)
        if not remote_event then
            warn("Remote event not found!")
            return
        end

        remote_event:FireServer(Argument, predicted_position)
    else
        warn("Predicted position is nil!")
    end
end

local function updateColors()
    fovCircle.Color = getgenv().FOVCircleColor
    tracer.Color = getgenv().TracerColor
    newFrame.BackgroundColor3 = getgenv().DotColor
end

local function updateVisuals(target)
    if target and is_target_valid(target) then
        local aimPart = target.Character[getgenv().AimPart]
        local aimPosition = aimPart.Position + Vector3.new(0, getgenv().JumpOffset, 0)
        local screenPosition, onScreen = Camera:WorldToScreenPoint(aimPosition)

        if onScreen then
            newFrame.Visible = true
            DotParent.CFrame = CFrame.new(aimPosition)
            tracer.Visible = true
            tracer.From = Vector2.new(Mouse.X, Mouse.Y)
            tracer.To = Vector2.new(screenPosition.X, screenPosition.Y)
        else
            newFrame.Visible = false
            tracer.Visible = false
        end
    else
        newFrame.Visible = false
        tracer.Visible = false
    end
end

UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    if input.KeyCode == (getgenv().Key or Enum.KeyCode.Q) and getgenv().Aimlock then
        Locked = not Locked
        Victim = Locked and get_closest_target() or nil
    elseif input.KeyCode == (getgenv().DisableKey or Enum.KeyCode.P) then
        getgenv().Aimlock = not getgenv().Aimlock
        Locked, Victim = false, nil
    end
end)

LocalPlayer.CharacterAdded:Connect(function()
    Locked = false
    Victim = nil
    newFrame.Visible = false
    tracer.Visible = false
end)

spawn(function()
    RunService.Stepped:Connect(function()
        if Victim and Victim.Character and Victim.Character:FindFirstChild("Humanoid") then
            local humanoid = Victim.Character.Humanoid
            if humanoid:GetState() == Enum.HumanoidStateType.Freefall then
                getgenv().JumpOffset = 0.06
            else
                getgenv().JumpOffset = 0
            end
        end
    end)
end)

local function world_to_screen(position)
    local screen_position, on_screen = Camera:WorldToViewportPoint(position)
    return { position = Vector2.new(screen_position.X, screen_position.Y), on_screen = on_screen }
end

RunService.RenderStepped:Connect(function()
    if fovCircle then
        fovCircle.Radius = getgenv().FOVSize * 2
        fovCircle.Position = Vector2.new(Mouse.X, Mouse.Y + GuiService:GetGuiInset().Y)
        fovCircle.Visible = getgenv().UseFOV and getgenv().ShowFOVCircle
    else
        warn("fovCircle is nil!")
    end

    if Locked then
        if not is_target_valid(Victim) then
            Victim = get_closest_target()
            if Victim then
                print("Locked onto target: " .. Victim.Name)
            else
                print("No valid target found.")
            end
        end

        if is_target_valid(Victim) then
            local predicted_world_position = calculate_predicted_position(Victim)
            if predicted_world_position then
                local predicted_position = world_to_screen(predicted_world_position)
                local mouse_position = UserInputService:GetMouseLocation();

                if tracer then
                    tracer.Visible = predicted_position.on_screen and getgenv().ShowTracer
                    tracer.From = mouse_position
                    tracer.To = predicted_position.position
                    tracer.Color = getgenv().TracerColor
                    tracer.Transparency = 1
                    tracer.Thickness = 2
                else
                    warn("tracer is nil!")
                end

                if predicted_position.on_screen and getgenv().ShowDot then
                    newFrame.Visible = true
                    DotParent.CFrame = CFrame.new(predicted_world_position + Vector3.new(0, getgenv().JumpOffset, 0))
                else
                    newFrame.Visible = false
                    DotParent.CFrame = CFrame.new(0, 9999, 0)
                end

                fire_bullet(predicted_world_position + Vector3.new(0, getgenv().JumpOffset, 0))
            else
                warn("Predicted position is nil!")
            end
        else
            newFrame.Visible = false
            DotParent.CFrame = CFrame.new(0, 9999, 0)
        end
    else
        if tracer then
            tracer.Visible = false
        end
        newFrame.Visible = false
        DotParent.CFrame = CFrame.new(0, 9999, 0)
    end
end)

local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/Splix"))()
local window = library:new({
    textsize = 17.5,
    font = Enum.Font.RobotoMono,
    name = "Blabware | so skidded xd! | dc; blabtheblab",
    color = getgenv().UIColor
})

local aimbotTab = window:page({name = "Aimbot"})
local playersTab = window:page({name = "Players"})
local visualsTab = window:page({name = "Visuals"})

local leftSection = aimbotTab:section({
    name = "Aimbot Settings",
    side = "left",
    size = 350
})

leftSection:keybind({
    name = "Keybind",
    def = getgenv().Key or Enum.KeyCode.Q, -- default to Q if not set
    callback = function(newKey)
        getgenv().Key = newKey -- this will be Enum.KeyCode
        print("Lock key changed to:", tostring(newKey))
    end
})

leftSection:textbox({
    name = "Prediction",
    def = tostring(getgenv().Prediction),
    placeholder = "Enter Prediction Value (e.g., 0.134)",
    callback = function(value)
        local numValue = tonumber(value)
        if numValue then
            getgenv().Prediction = numValue
            print("Prediction set to:", numValue)
        else
            print("Invalid input for Prediction. Please enter a number.")
        end
    end
})

leftSection:slider({
    name = "Jump Offset",
    def = getgenv().JumpOffset,
    min = 0,
    max = 0.1,
    rounding = false,
    callback = function(value)
        getgenv().JumpOffset = value
        print("Jump Offset set to:", value)
    end
})

leftSection:toggle({
    name = "Enable Resolver",
    def = getgenv().ResolverEnabled,
    callback = function(value)
        getgenv().ResolverEnabled = value
        print("Resolver enabled:", value)
    end
})

leftSection:dropdown({
    name = "Resolver Method",
    def = getgenv().ResolverMethod,
    options = {"Recalculate", "MoveDirection"},
    callback = function(value)
        getgenv().ResolverMethod = value
        print("Resolver method set to:", value)
    end
})

leftSection:slider({
    name = "Update Time",
    def = getgenv().ResolverUpdateTime,
    min = 1,
    max = 200,
    rounding = false,
    callback = function(value)
        getgenv().ResolverUpdateTime = value
        print("Resolver update time set to:", value)
    end
})

leftSection:toggle({
    name = "Show FOV Circle",
    def = true,
    callback = function(val)
        getgenv().ShowFOVCircle = val
    end
})
leftSection:toggle({
    name = "Show Dot",
    def = true,
    callback = function(val)
        getgenv().ShowDot = val
    end
})
leftSection:toggle({
    name = "Show Tracer",
    def = true,
    callback = function(val)
        getgenv().ShowTracer = val
    end
})

local rightSection = aimbotTab:section({
    name = "Color Settings",
    side = "right",
    size = 350
})

rightSection:colorpicker({
    name = "FOV Circle Color",
    def = getgenv().FOVCircleColor,
    callback = function(color)
        getgenv().FOVCircleColor = color
        updateColors()
        print("FOV Circle Color set to:", color)
    end
})

rightSection:colorpicker({
    name = "Dot Color",
    def = getgenv().DotColor,
    callback = function(color)
        getgenv().DotColor = color
        updateColors()
        print("Dot Color set to:", color)
    end
})

rightSection:colorpicker({
    name = "Tracer Color",
    def = getgenv().TracerColor,
    callback = function(color)
        getgenv().TracerColor = color
        updateColors()
        print("Tracer Color set to:", color)
    end
})

local antiLockSection = aimbotTab:section({
    name = "Anti Lock",
    side = "left",
    size = 250
})

local antiTypes = {
    "None",
    "supercoolboi34 Destroyer",
    "Destroy Cheaters"
}

antiLockSection:toggle({
    name = "Enable Antilock",
    def = getgenv().AntiLockEnabled,
    callback = function(val)
        getgenv().AntiLockEnabled = val
        -- When toggled off, stop anti immediately
        if not val then
            getgenv().AntiLockActive = false
        end
        print("Antilock enabled:", val)
    end
})

antiLockSection:keybind({
    name = "Antilock Keybind",
    def = getgenv().AntiLockKey,
    callback = function(newKey)
        getgenv().AntiLockKey = newKey
        print("Antilock keybind set to:", tostring(newKey))
    end
})

antiLockSection:dropdown({
    name = "Antilock Type",
    def = getgenv().AntiLockType,
    options = antiTypes,
    callback = function(val)
        getgenv().AntiLockType = val
        print("Antilock type set to:", val)
    end
})

-- Keybind logic: only trigger anti if enabled
UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    if input.KeyCode == (getgenv().AntiLockKey or Enum.KeyCode.Z) then
        if getgenv().AntiLockEnabled then
            getgenv().AntiLockActive = not getgenv().AntiLockActive
            print("Antilock triggered, now active:", getgenv().AntiLockActive)
        else
            getgenv().AntiLockActive = false
        end
    end
end)

-- Alternator for Starhook Destroyer, only runs if anti is active
task.spawn(function()
    while true do
        if getgenv().AntiLockActive and getgenv().AntiLockType == "supercoolboi34 Destroyer" then
            getgenv().ShouldStarhookDestroy = not getgenv().ShouldStarhookDestroy
        else
            getgenv().ShouldStarhookDestroy = false
        end
        task.wait(0.1)
    end
end)

-- Main logic (runs every frame if anti is active)
RunService.Heartbeat:Connect(function()
    if not getgenv().AntiLockActive then return end
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end

    local hrp = LocalPlayer.Character.HumanoidRootPart
    local original_cframe = hrp.CFrame

    if getgenv().AntiLockType == "supercoolboi34 Destroyer" then
        if getgenv().ShouldStarhookDestroy then
            hrp.CFrame = original_cframe + Vector3.new(0/0, 1, math.huge)
        else
            hrp.CFrame = original_cframe
        end
        RunService.RenderStepped:Wait()
        hrp.CFrame = original_cframe

    elseif getgenv().AntiLockType == "Destroy Cheaters" then
        hrp.CFrame = original_cframe + Vector3.new(0/0, 1, math.huge)
        RunService.RenderStepped:Wait()
        hrp.CFrame = original_cframe

    -- None (do nothing)
    end
end)


local function setThemeColor(newColor)
    window.theme.accent = newColor

    for property, elements in pairs(window.themeitems.accent) do
        for _, element in pairs(elements) do
            if element and element[property] then
                element[property] = newColor
            end
        end
    end
end

rightSection:colorpicker({
    name = "UI Color",
    def = window.theme.accent,
    callback = function(newColor)
        print("Changing UI color to:", newColor)
        setThemeColor(newColor)
    end
})

local EspSection = playersTab:section({
    name = "Player Esp",
    side = "left",
    size = 250
})

EspSection:toggle({
    name = "ESP Enabled",
    def = getgenv().ESPEnabled,
    callback = function(val)
        if getgenv().SetESPToggle then
            getgenv().SetESPToggle(val)
        else
            getgenv().ESPEnabled = val
        end
    end
})

EspSection:toggle({
    name = "ESP Highlight",
    def = getgenv().ShowESPHighlight or true,
    callback = function(val)
        getgenv().ShowESPHighlight = val
        if getgenv().SetESPToggle then getgenv().SetESPToggle(getgenv().ESPEnabled) end
    end
})

EspSection:toggle({
    name = "ESP Health Bar",
    def = getgenv().ShowESPHealthBar or true,
    callback = function(val)
        getgenv().ShowESPHealthBar = val
        if getgenv().SetESPToggle then getgenv().SetESPToggle(getgenv().ESPEnabled) end
    end
})

local CoreGui = game:GetService("CoreGui")
local espFolder = CoreGui:FindFirstChild("BlabESPFolder") or Instance.new("Folder")
espFolder.Name = "BlabESPFolder"
espFolder.Parent = CoreGui

local function clearESP()
    for _, v in ipairs(espFolder:GetChildren()) do
        v:Destroy()
    end
end

local function drawESP(player)
    local function refresh()
        if not getgenv().ESPEnabled then return end
        if player == LocalPlayer then return end
        if not player.Character or not player.Character:FindFirstChild("Humanoid") or not player.Character:FindFirstChild("HumanoidRootPart") then return end

        -- Remove old
        local oldHL = espFolder:FindFirstChild(player.Name .. "_HL")
        if oldHL then oldHL:Destroy() end
        local oldGUI = espFolder:FindFirstChild(player.Name .. "_GUI")
        if oldGUI then oldGUI:Destroy() end

        local char = player.Character

        -- Highlight (visible at any distance)
        if getgenv().ShowESPHighlight then
            local hl = Instance.new("Highlight")
            hl.Name = player.Name .. "_HL"
            hl.Adornee = char
            hl.FillColor = (getgenv().FOVCircleColor or Color3.fromRGB(158, 128, 255))
            hl.OutlineColor = Color3.new(0, 0, 0)
            hl.FillTransparency = 0.5
            hl.OutlineTransparency = 0.1
            hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop -- always visible, even far away
            hl.Parent = espFolder
        end

        -- Health bar & name
        if getgenv().ShowESPHealthBar then
            local bb = Instance.new("BillboardGui")
            bb.Name = player.Name .. "_GUI"
            bb.Adornee = char:FindFirstChild("Head") or char:FindFirstChild("HumanoidRootPart")
            bb.Size = UDim2.new(0, 100, 0, 20)
            bb.StudsOffset = Vector3.new(0, 2.5, 0)
            bb.AlwaysOnTop = true
            bb.LightInfluence = 0
            bb.SizeOffset = Vector2.new(0, 0)
            bb.Parent = espFolder

            local nameLabel = Instance.new("TextLabel")
            nameLabel.Name = "Name"
            nameLabel.Size = UDim2.new(1, 0, 0, 16)
            nameLabel.Position = UDim2.new(0, 0, 0, 0)
            nameLabel.BackgroundTransparency = 1
            nameLabel.Text = player.Name
            nameLabel.TextColor3 = Color3.new(1, 1, 1)
            nameLabel.TextStrokeTransparency = 0.5
            nameLabel.Font = Enum.Font.Code
            nameLabel.TextSize = 14
            nameLabel.Parent = bb

            local bg = Instance.new("Frame")
            bg.Name = "HealthBG"
            bg.Size = UDim2.new(1, 0, 0, 4)
            bg.Position = UDim2.new(0, 0, 0, 16)
            bg.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1)
            bg.BorderSizePixel = 0
            bg.Parent = bb

            local bar = Instance.new("Frame")
            bar.Name = "Health"
            bar.Size = UDim2.new(1, 0, 1, 0)
            bar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            bar.BorderSizePixel = 0
            bar.Parent = bg

            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(0, 2)
            corner.Parent = bar

            local hum = char:FindFirstChild("Humanoid")
            if hum then
                bar.Size = UDim2.new(math.clamp(hum.Health/hum.MaxHealth, 0, 1), 0, 1, 0)
                hum.HealthChanged:Connect(function(health)
                    bar.Size = UDim2.new(math.clamp(health/hum.MaxHealth, 0, 1), 0, 1, 0)
                end)
            end
        end
    end

    -- Listen for respawn
    player.CharacterAdded:Connect(function()
        task.wait(0.5)
        if getgenv().ESPEnabled then
            refresh()
        end
    end)

    if player.Character then
        refresh()
    end
end

local function updateAllESP()
    clearESP()
    if not getgenv().ESPEnabled then return end
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            drawESP(player)
        end
    end
end

Players.PlayerAdded:Connect(function(player)
    if getgenv().ESPEnabled then
        drawESP(player)
    end
end)
Players.PlayerRemoving:Connect(function(player)
    local hl = espFolder:FindFirstChild(player.Name .. "_HL")
    if hl then hl:Destroy() end
    local gui = espFolder:FindFirstChild(player.Name .. "_GUI")
    if gui then gui:Destroy() end
end)

getgenv().SetESPToggle = function(enabled)
    getgenv().ESPEnabled = enabled
    updateAllESP()
end

if getgenv().ESPEnabled then
    updateAllESP()
end
